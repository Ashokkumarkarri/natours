
const tourSchema=new mongoose.Schema()
we pass schema as an object.
-----------------------------------------------------------------------------------------
basic schema:
const tourSchema=new mongoose.Schema({
  name:String,
  rating:Number,
  price:Number
})

advanced schema:

const tourSchema = new mongoose.Schema({
  name: {
    type: String, // The "name" field must be a string
    required: [true, 'A tour must have a name'], // "required" means this field must have a value, and a custom error message is provided if it is missing.
    unique: true, // Ensures no two tours can have the same name
  },
  rating: {
    type: Number, // The "rating" field is a number
    default: 4.1, // If no rating is provided, it defaults to 4.1
  },
  price: {
    type: Number, // The "price" field must be a number
    required: [true, 'A tour must have a price'], // "required" with a custom message if price is missing
  },
});

------------------------------------------------------------------------------------------
model:

const Tour = mongoose.model('Tour', tourSchema);

//name of the model  , schema
//allways use upper case ofr model names and varible.
// thats why I had used Captial T for the varible so that we will get to know that we are dealing with mode.

---------------------------------------------------------------------------------------
Notes:

Schema: Defines the structure of your data.
        Example: The tourSchema defines what fields a "tour" should have (name, rating, price).

Model: A tool to interact with the MongoDB collection.
        Created using mongoose.model('ModelName', schema).
        Example: Tour is the model for the "tours" collection.

------------------------------------------------------------------------------------------------